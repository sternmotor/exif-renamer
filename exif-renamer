#!/usr/bin/env python
"""
debian/ubuntu:
apt-get install python3-pip
pip3 install --upgrade pip exifrenamer exiftimestamper


mac os:
sudo easy_install pip
sudo pip install --upgrade pip exifread argparse
"""

import datetime
import exifread
import exifread.tags
import glob
import os
import platform
import re
import logging
#logging.basicConfig(level=logging.DEBUG)
logging.basicConfig(level=logging.INFO)
log= logging.getLogger(__name__)

#WORKING_DIR = '/Users/gunnar/Documents/exif'
#WORKING_DIR = '/Users/gunnar/Pictures/Fotos/Sammlung/date/gunnar'
WORKING_DIR = '.'

# case insensitive file extensions for filtering work dir
JPEG_PATTERNS = (
    '*.gif',
    '*.GIF',
    '*.JPEG',
    '*.jpeg',
    '*.JPG',
    '*.jpg',
    '*.MOV',
    '*.mov',
    '*.MP4',
    '*.mp4',
    '*.PNG',
    '*.png',
    '*.tif',
    '*.tiff',
)


def list_files(dir_path, file_patterns=JPEG_PATTERNS, recursive=True):
    # recursive search
    if recursive is True:
        for root, sub_folders, files in os.walk(dir_path):
            for pattern in file_patterns:
                for match in glob.iglob(os.path.join(root, pattern)):
                    if match.startswith('._'):
                        log.debug('Skipping file "{0}"'.format(match))
                    else:
                        yield match
    
    # non-recursive
    else:
        for pattern in file_patterns:
            for match in glob.iglob(os.path.join(dir_path, pattern)):
                if not match.startswith('._'):
                    yield match


def get_exifdate(path):
    """Read exif time stamp of file, return none if not possible"""

    with open(path, 'r') as current_file:

        data = exifread.process_file(
            current_file, 
            stop_tag='EXIF DateTimeOriginal'
        )

        if data:
            try:
                ds = data['EXIF DateTimeOriginal']
            except KeyError:
                log.debug('No "EXIF DateTimeOriginal" found in file "{0}"'.format(path))
                return None
            else:
                try:
                    return datetime.datetime.strptime(str(ds), "%Y:%m:%d %H:%M:%S")
                except ValueError:
                    log.debug('Wrong date format "{0}" in file "{1}"'.format(
                            ds, path
                        )
                    )
        else:
            log.debug('No exif data found in file "{0}"'.format(path))
            return None

def get_filename_date(path):
    """
    in case this file has date info in file name like 
    "IMG_20180318_152530_2955.JPG", try to get date info from there
    """
    file_name = os.path.basename(path)
    if file_name.startswith('IMG_'):
        strings = file_name.split('_')
        ds = ' '.join(strings[1:3])
        try:
            return datetime.datetime.strptime(str(ds), "%Y%m%d %H%M%S")
        except ValueError:
            log.debug('No date information found in file name "{0}"'.format(file_name))
            return None

def get_filestat(path):
    """
    Try to get the date that a file was created, falling back to when it was
    last modified if that isn't possible.
    See http://stackoverflow.com/a/39501288/1709587 for explanation.
    """

    if platform.system() == 'Windows':
        seconds = os.path.getctime(path)
    else:
        stat = os.stat(path)
        try:
            seconds = stat.st_birthtime
        except AttributeError:
            # We're probably on Linux. No easy way to get creation dates here,
            # so we'll settle for when its content was last modified.
            seconds = stat.st_mtime

    return datetime.datetime.fromtimestamp(seconds)


def is_datepath(path):
    """Check if filename starts with timestamp, already"""

    first_string = os.path.splitext(os.path.basename(path))[0].split()[0]
    try:
        datetime.datetime.strptime(first_string, "%Y%m%d-%H%M")
    except ValueError:
        return False
    else:
        return True


def get_datepath(path, date):
    """Create new path starting with date info"""

    date_string = date.strftime("%Y%m%d-%H%M")
    return os.path.join(
        os.path.dirname(path),
        '{0} {1}'.format(date_string, os.path.basename(path))
    )



for path in list_files(WORKING_DIR):

    # retrieve new file name, if necessary
    if is_datepath(path):
        log.info('file "0{}" looks good, already'.format(path))
        continue
    else:
        # retrieve date of media file - exif or file creation
        date = get_exifdate(path)

        if date and date is not 0:
            log.info('"{1}" from exif data in "{0}"'.format( path, date))
        else:
            date = get_filename_date(path)
            if date and date is not 0:
                log.info('"{1}" from date info in file name of "{0}"'.format(path, date))
            else:    
                date = get_filestat(path)
                log.info('"{1}" from file stat data of file "{0}"'.format(path, date))

        new_path = get_datepath(path, date)
        
        # rename file
        log.debug('renaming file to "{}"'.format(os.path.basename(new_path)))
        os.rename(path, new_path)
